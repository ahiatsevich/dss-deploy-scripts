#!/usr/bin/env bash

#  Copyright (C) 2019-2020 Maker Ecosystem Growth Holdings, INC.

#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU Affero General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.

#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Affero General Public License for more details.

#  You should have received a copy of the GNU Affero General Public License
#  along with this program.  If not, see <https://www.gnu.org/licenses/>.

# shellcheck source=lib/common.sh
. "$LIB_DIR/common.sh"

{ test -z "$1" || test -z "$3"; } && exit 1

# Get config variables
CONFIG_FILE="$OUT_DIR/config.json"

tok=$1
if [[ -n "$2" ]]; then
    ilk="${1}-${2}"
    ilkVar="${1}_${2}"
else
    echo "an ilk letter is required"
    exit 1
fi
ilkJoin=$3 # adapter contract name
decimals=$4

# Deploy ETH ilk (adapter, spotter, flip and init variables)
test -z "$MCD_DEPLOY" && exit 1

MCD_VAT=$(seth call "$MCD_DEPLOY" "vat()(address)")
if [[ "$decimals" != "" ]]; then
    contract=$(dappCreate dss-gem-joins "$ilkJoin" "$MCD_VAT" "$(seth --to-bytes32 "$(seth --from-ascii "$ilk")")" "$(eval echo "\$${tok}")" "$decimals")
else
    contract=$(dappCreate dss-gem-joins "$ilkJoin" "$MCD_VAT" "$(seth --to-bytes32 "$(seth --from-ascii "$ilk")")" "$(eval echo "\$${tok}")")
fi
eval export "\MCD_JOIN_${ilkVar}=${contract}"
log "MCD_JOIN_${ilkVar}=$(eval "echo ${contract}")"

sethSend "$MCD_DEPLOY" "deployCollateralFlip(bytes32,address,address)" "$(seth --to-bytes32 "$(seth --from-ascii "$ilk")")" "$(eval echo "\$MCD_JOIN_${ilkVar}")" "$(eval echo "\$PIP_${tok}")"

# Deploy price decrease calculator
calcType=$(jq -r ".tokens.$1.ilks.$2.calc.type" $CONFIG_FILE)
calc=$(dappCreate dss ${calcType})
MCD_PAUSE_PROXY=$(seth call "$(seth call "$MCD_DEPLOY" "pause()(address)")" "proxy()(address)")
sethSend "$calc" 'rely(address)' "$MCD_PAUSE_PROXY"
sethSend "$calc" 'deny(address)' "$ETH_FROM"
eval export "\MCD_CLIP_CALC_${ilkVar}=${calc}"

sethSend "$MCD_DEPLOY" "deployCollateralClip(bytes32,address,address,address)" \
    "$(seth --to-bytes32 "$(seth --from-ascii "$ilk")")"                       \
    "$(eval echo "\$MCD_JOIN_${ilkVar}")"                                      \
    "$(eval echo "\$PIP_${tok}")"                                              \
    "$(eval echo "\$MCD_CLIP_CALC_${ilkVar}")"

while IFS=$'\n' read -r line; do data+=("$line"); done < <(seth call "$MCD_DEPLOY" "ilks(bytes32)(address,address,address)" "$(seth --to-bytes32 "$(seth --from-ascii "$ilk")")")
eval export "\MCD_FLIP_${ilkVar}=${data[0]}"
eval export "\MCD_CLIP_${ilkVar}=${data[1]}"

cat > "$OUT_DIR/load-ilk-addr-temp" << EOF
#!/bin/bash
export PIP_${tok}=$(eval echo "\$PIP_${tok}")
export ${tok}=$(eval echo "\$${tok}")
export MCD_JOIN_${ilkVar}=$(eval echo "\$MCD_JOIN_${ilkVar}")
export MCD_FLIP_${ilkVar}=$(eval echo "\$MCD_FLIP_${ilkVar}")
export MCD_CLIP_${ilkVar}=$(eval echo "\$MCD_CLIP_${ilkVar}")
export MCD_CLIP_CALC_${ilkVar}=$(eval echo "\$MCD_CLIP_CALC_${ilkVar}")
EOF
